5 Mistakes C/C++ Devs make writing Go
A newbie's journey into Go

Aug 29 2018

Nyah Check
Software Engineer, Altitude Networks
nyah@altitudenetworks.com
https://github.com/Ch3ck
@nyah_check



* Why am I here?

- Wrote C/C++ for close to 5 years before Go.

- Brought bad C style code in Go and had a lot of issues


* What you'll learn...

- Learn from my mistakes

- Avoid some common pitfalls newbies face writing Go



* Agenda

I classified the 5 mistakes under 4 topics:

- Escape Analysis
- Memory leaks
- Goroutine leaks
- Error handling

I'll be open to questions at the end of the presentation



- Introduction
- [[01-new-doesnt-mean-heap/new-doesnt-mean-heap.slide][Understanding escape analysis in Go]]
- [[02-do-not-defer-in-infinite-loop/do-not-defer-in-infinite-loop.slide][Do not defer in an infinite loop]]
- [[03-pointer-in-non-visible-slice-portion/pointer-in-non-visible-slice-portion.slide][Memory safety with three-index slice]]
- [[04-error-handling-with-channels/error-hanlding-with-channels.slide][Avoiding goroutine leaks]]
- [[05-errors-are-not-strings/errors-are-not-strings.slide][Errors are much more than strings]]
- [[05-errors/are-not/strings/conclusion.slide][Conclusion & Q/A]]

After each section we'll have time for questions.

* One more thing ...

This isn't a lecture, it's a conversation.

We'll have lots of breaks to ask questions.

NOTE: If you don't understand something, or think what you're hearing is incorrect, please ask.

* Introduction

Understanding Escape Analysis

* Next

[[01-new-doesnt-mean-heap/new-doesn't-mean-heap.slide][Understanding Escape Analysis]]



